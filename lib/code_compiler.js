var spawn = require('child_process').spawn;

function c_compiler(filename, codeDbObj, callback) {

    var outputFilename = filename + '.out';

    var des_folder = './code/' + codeDbObj._user + '/';
    var full_path = des_folder + filename;

    var compile = spawn('gcc', [full_path, '-o', des_folder + outputFilename]);

    var compiler_error_message = null;
    var compiler_message = null;
    compile.stdout.on('data', function (data) {
        // Here data refers to the compiler messages
        compiler_message += data;
    });

    compile.stderr.on('data', function (data) {
        // Here data refers to the compiler errors messages
        compiler_error_message += data;
    });

    compile.on('close', function (code) {
        // Here code refers to the code with which the child process
        // exited

        // The source code file needs to be removed in either case
        // whether there has been a error or not an error
        console.log('compiler_message: ' + compiler_message);    
        console.log('compiler_error_message: ' + compiler_error_message);
        console.log(filename);
        FileRemover(filename, codeDbObj);

        // If the child process exited with 0 then there has been no error
        if (code === 0) {

            // If there has been no error then it should return the name
            // of the compiled output file
            callback(null, outputFilename, compiler_message, compiler_error_message);
        } else {
            // else if there was a error then it should return the
            // error code and the error produced
            callback(code, null, compiler_message, compiler_error_message);
        }
    });    
}

function compiler(filetype, filename, codeDbObj, callback) {
    console.log(filename)
    switch(filetype) {
        case 'c': 
            c_compiler(filename, codeDbObj, function(err, outputFilename, compiler_message, compiler_error_message) {
                if (err) {
                    // there has been an error by the compiler
                    console.log(err);
                } else if (compiler_error_message){
                    // there must have been some error message generated by the compiler
                    codeDbObj.outputStatus = 'Error';
                    codeDbObj.message = compiler_error_message;
                } else if (compiler_message){
                    // there must have been some warrning message generated by the compiler
                    codeDbObj.outputStatus = 'Warning';
                    codeDbObj.message = compiler_message;
                } else {
                    // there has been no error and the code has been compiled sucessfully
                    codeDbObj.outputStatus = 'OK';
                }

                codeDbObj.save(function(err, dbObj) {
                    if (err) {
                        console.log('DB Saving Error: ' + err);
                    } else {
                        if (outputFilename) {
                            // If there is an output file name then it was compiled
                            // but it might contain warnings
                            callback(null, outputFilename, dbObj, compiler_message, compiler_error_message);
                        } else {
                            // If no output filename was there then there might be
                            // some serious problems
                            callback(1, null, dbObj, compiler_message, compiler_error_message);
                        }
                        
                    }
                })
            });
            break;
        default:
            console.log('Unknown File format');
    }
}

module.exports = compiler